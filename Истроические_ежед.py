import pandas as pd #импорт библиотеки Pandas, используя псевдоним pd
import requests #импорт библиотеки requests для выполнения HTTP-запросов
from io import StringIO #импорт класса StringIO из библиотеки io для работы с файлами в памяти
import time #импорт модуля time для работы со временем
from datetime import datetime #импорт класса datetime из модуля datetime для работы с датами и временем
import xlsxwriter #импорт библиотеки xlsxwriter для записи данных в файлы Excel

def get_yahoo_stock_data(ticker, start_date, end_date, cookie, crumb): #определение функции get_yahoo_stock_data, которая получает данные об акциях из сервиса Yahoo Finance по указанным параметрам: тикеру (ticker), начальной дате (start_date), конечной дате (end_date), значению cookie (cookie) и значению crumb (crumb).
    start_date_unix = int(pd.Timestamp(start_date).timestamp()) #преобразование начальной даты в Unix-формат (количество секунд с 1 января 1970 года)
    end_date_unix = int(pd.Timestamp(end_date).timestamp()) #преобразование конечной даты в Unix-формат (количество секунд с 1 января 1970 года)

    url = f"https://query1.finance.yahoo.com/v7/finance/download/{ticker}?period1={start_date_unix}&period2={end_date_unix}&interval=1d&events=history&crumb={crumb}"#формирование URL-адреса для получения данных об акциях из сервиса Yahoo Finance
    headers = {#{...} - определение заголовков HTTP-запроса
        "user-agent": "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)",
        "cookie": f"B={cookie};",
        "referer": f"https://finance.yahoo.com/quote/{ticker}/history?p={ticker}" 
    }

    response = requests.get(url, headers=headers) #выполнение HTTP-запроса и сохранение ответа в переменную response

    if response.status_code == 200: #проверка статуса ответа на корректность (код 200 означает успешное выполнение запроса)
        data = pd.read_csv(StringIO(response.text)) #чтение CSV-данных из ответа в память
        return data #возврат полученных данных об акциях
    else: #если ответ содержит ошибку, то выполнить следующую строку
        print(f"Error fetching data for {ticker}: {response.status_code}") #вывод сообщения об ошибке
        return None #возврат пустого значения (None)

cookie = "YOUR_COOKIE_VALUE" #значение cookie для запросов к сервису Yahoo Finance
crumb = "YOUR_CRUMB_VALUE" #значение crumb для запросов к сервису Yahoo Finance
#Чтобы получить список всех тикеров, выполните следующие шаги:
#Перейдите на сайт Московской биржи: https://www.moex.com
#Наведите курсор на вкладку "Торговля" в верхнем меню и выберите "Торговые инструменты".
#На странице "Торговые инструменты" выберите "Акции" или другой тип инструментов, если вас интересуют другие тикеры (например, облигации или фонды).
#Вы увидите таблицу со списком всех акций, торгуемых на Московской бирже. В этой таблице представлены тикеры, коды ISIN, название компаний, типы акций и другие данные. Вы также можете экспортировать этот список в формате XLS или CSV.
#Обратите внимание, что список акций и тикеров может регулярно обновляться из-за корпоративных действий, добавления или удаления акций с биржи. Поэтому рекомендуется периодически проверять сайт Московской биржи, чтобы получать актуальную информацию.
#Вот пример некоторых из них:
#'LKOH.ME': 'Лукойл', 'ROSN.ME': 'Роснефть', 'GMKN.ME': 'Норильский никель', 'TATN.ME': 'Татнефть', 
#'NVTK.ME': 'Новатэк', 'SNGS.ME': 'Сургутнефтегаз', 'POLY.ME': 'Полюс', 'AFKS.ME': 'АФК Система', 'RTKM.ME': 
#'Ростелеком', 'MGNT.ME': 'Магнит', 'MOEX.ME': 'Московская биржа (MOEX.ME)', 'RUAL.ME': 'Русал', 'VTBR.ME': 
#'ВТБ', 'MTLR.ME': 'Мечел', 'CHMF.ME': 'Северсталь', 'YNDX.ME': 'Яндекс', 'LSRG.ME': 'Группа', 'MVID.ME': 'М.видео', 
#'FEES.ME': 'ФСК ЕЭС', 'AKRN.ME': 'Акрон', 'AGRO.ME': 'Русагро', 'MCXG.ME': 'Московский Кредитный Банк', 'KMAZ.ME':
#'Красноярский металлургический комбинат', 'NLMK.ME': 'НЛМК', 'POLY.ME': 'Полиметалл', 'AFKS.ME': 'Система', 'MFON.ME': 
#'МегаФон', 'POG.ME': 'Петропавловск', 'HYDR.ME': 'РусГидро', 'TRNF.ME': 'Транснефть', 'FIVE.ME': 'ФосАгро', 'MSTT.ME': 
#'Московский завод "Кристалл"', 'FEES.ME': 'ФСК', 'SPSB.ME': 'Санкт-Петербургская биржа', 'ALRS.ME': 'Алроса', 'PIKK.ME': 'Группа Компаний ПИК'
tickers = { #словарь, содержащий тикеры акций и их названия
    'GAZP.ME': 'Газпром', #
    'SBER.ME': 'Сбербанк' #
}

start_date = "2020-01-01" #начальная дата для получения данных об акциях
end_date = datetime.today().strftime("%Y-%m-%d") #задаем конечную дату сбора данных как текущую дату в формате год-месяц-день.

rub_usd_ticker = "RUB=X" #задаем тикер для валютной пары RUB/USD.
rub_usd_data = get_yahoo_stock_data(rub_usd_ticker, start_date, end_date, cookie, crumb) #получаем исторические данные для валютной пары RUB/USD с помощью функции get_yahoo_stock_data

if rub_usd_data is not None: #проверяем, получены ли данные для валютной пары RUB/USD.
    rub_usd_data = rub_usd_data.rename(columns={ #переименовываем столбцы полученных данных для валютной пары RUB/USD.
        "Date": "Дата (руб.)", #
        "Close": "Закрытие (руб.)", #
    })
    rub_usd_data = rub_usd_data[["Дата (руб.)", "Закрытие (руб.)"]] #выбираем только столбцы с датой и закрытием курса валютной пары RUB/USD

    for ticker, company_name in tickers.items(): #начинаем итерацию по словарю с тикерами и названиями компаний.
        stock_data = get_yahoo_stock_data(ticker, start_date, end_date, cookie, crumb) #получаем исторические данные для текущей компании с помощью функции get_yahoo_stock_data.
        time.sleep(3)  # дделаем задержку в 3 секунды между запросами, чтобы избежать блокировки со стороны сервера.

        if stock_data is not None: #проверяем, получены ли данные для текущей компании.
            stock_data = stock_data.rename(columns={ #переименовываем столбцы полученных данных для текущей компании.
                "Date": "Дата (руб.)",
                "Open": "Открытие (руб.)",
                "High": "Максимальная (руб.)",
                "Low": "Мининимальная (руб.)",
                "Close": "Закрытие (руб.)",
                "Adj Close": "Скорректированное закрытие (руб.)",
                "Volume": "Объем (шт.)",
            })

            stock_data = stock_data.merge(rub_usd_data, on='Дата (руб.)', how='left') #объединяем данные для текущей компании с данными для валютной пары RUB/USD по столбцу с датой.

            writer = pd.ExcelWriter(f'{company_name}.xlsx', engine='xlsxwriter') #создание объекта записи в Excel-файл с помощью модуля pd.ExcelWriter

            stock_data.to_excel(writer, sheet_name=company_name, index=False) #запись данных DataFrame в лист Excel-файла

            worksheet = writer.sheets[company_name] #получение ссылки на лист Excel-файла для настройки ширины столбцов

            # Автоматическое изменение ширины столбцов на основе содержимого ячеек
            for i, column in enumerate(stock_data.columns):
                column_width = max(stock_data[column].astype(str).map(len).max(), len(column))
                worksheet.set_column(i, i, column_width + 1)
            #Закрытие объекта записи в Excel-файл
            writer.close()

#1.Данный код представляет программу для сбора финансовых данных о Российских компаниях (на примере Газпром и Сбербанк) и обменного курса рубля к доллару США с использованием API Yahoo Finance.
#2.Программа использует библиотеки Pandas, Requests, IO, DateTime и XlsxWriter. 
#3.Импортируются необходимые библиотеки.
#4.Определяется функция get_yahoo_stock_data, которая принимает в качестве параметров тикер, даты начала и конца периода, значение cookie и crumb для запроса данных с сайта Yahoo Finance.
#5.Определяются значения cookie и crumb для запросов к Yahoo Finance.
#6.Определяются тикеры и названия двух российских компаний и даты начала и конца периода, за который мы хотим получить данные.
#7.Программа вызывает функцию get_yahoo_stock_data для получения данных о курсе рубля к доллару США и сохраняет их в переменной rub_usd_data.
#8.Если данные о курсе рубля к доллару США получены успешно, то эти данные преобразуются и записываются в Excel-файл в отдельном листе.
#9.Для каждого тикера из словаря tickers программа вызывает функцию get_yahoo_stock_data для получения данных о цене акций за указанный период времени.
#10.Если данные о цене акций получены успешно, то они преобразуются и объединяются с данными о курсе рубля к доллару США. Затем данные записываются в Excel-файл в отдельном листе для каждой компании.
#11.В конце программа автоматически изменяет ширину столбцов в Excel-файле для каждого листа, чтобы сделать их более удобными для чтения.

#Как перспектива развития программы - создание установочного файла, добавление графического интерфеЙса для ввода финасового показателя, наименвание получаемой информации и соотвествующий период времени.
#создание телеграмм бота, способного выдавть заапрашиваемую информацию по данной тематике.
#также возможно внести и иные финансовые показатели Российской Федерации такие как:
#рыночную капитализацию, данные об индексах российской биржи, таких как ММВБ, РТС и других.   
#также данные об экономических показателях, таких как ВВП, инфляция, безработица и многое другое.